version: '3'

services:

  redis_bot:
    restart: always
    container_name: redis_bot
    hostname: redis_bot
    image: redis
    ports:
      - "6399:6379"
    command:
      - redis-server
      - --requirepass ${REDIS_PASSWORD}
      - --save 900 1
      - --save 300 10
      - --save 60 10000
    volumes:
      - data_redis_bot:/data
      - data_redis_dump_bot:/var/lib/redis_db/
    networks:
      - bot
    logging:
      driver: none

  redis-commander_bot:
    restart: always
    container_name: redis-commander_new_fssp
    hostname: redis-commander_new_fssp
    image: rediscommander/redis-commander:latest
    environment:
    - REDIS_HOSTS=${REDIS_HOSTS}
    ports:
      - "25000:8081"
    networks:
      - bot
    logging:
      driver: none

  postgress_bot:
    image: postgres
    restart: always
    command:
      - "postgres"
      - "-c"
      - "max_connections=50"
      - "-c"
      - "shared_buffers=1GB"
      - "-c"
      - "effective_cache_size=4GB"
      - "-c"
      - "work_mem=16MB"
      - "-c"
      - "maintenance_work_mem=512MB"
      - "-c"
      - "random_page_cost=1.1"
      - "-c"
      - "temp_file_limit=10GB"
      - "-c"
      - "log_min_duration_statement=200ms"
      - "-c"
      - "idle_in_transaction_session_timeout=10s"
      - "-c"
      - "lock_timeout=1s"
      - "-c"
      - "statement_timeout=60s"
      - "-c"
      - "shared_preload_libraries=pg_stat_statements"
      - "-c"
      - "pg_stat_statements.max=10000"
      - "-c"
      - "pg_stat_statements.track=all"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - data_postgress_bot:/var/lib/postgresql/data
    ports:
      - "5435:5432"
    networks:
      - bot
    logging:
      driver: none
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G

  api_bot:
    restart: always
    build:
      context: .
      dockerfile: fastapi.Dockerfile
    container_name: api_bot
    command: bash -c "aerich init -t settings.TORTOISE_ORM &&  aerich init-db && aerich migrate &&  aerich upgrade  && gunicorn main:app --host 0.0.0.0 --port 8000 --workers 6"
    environment:
      - .env
    depends_on:
      - redis_bot
      - postgress_bot
    ports:
    - 9666:8000
    volumes:
      - data_api:/app/logs/
    logging:
      options:
        max-size: "20m"
        max-file: "2"
    networks:
      - bot

  nginx_api_bot:
    restart: always
    container_name: nginx_api_bot
    image: nginx
    environment:
      TZ: Europe/Moscow
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./nginx/log:/var/log/nginx/
      - ./nginx/conf/nginx.conf:/etc/nginx/nginx.conf
    logging:
      options:
        max-size: "20m"
        max-file: "2"
    networks:
      - bot

  bot:
    restart: always
    build:
      context: .
      dockerfile: bot.Dockerfile
    container_name: bot
    environment:
      - .env
    depends_on:
      - api_bot
    ports:
    - 9666:8000
    volumes:
      - data_bot:/app/logs/
    logging:
      options:
        max-size: "20m"
        max-file: "2"
    networks:
      - bot

volumes:
  data_redis_bot:
  data_redis_dump_bot:
  data_postgress_bot:
  data_api:
  data_bot:

networks:
   bot:
